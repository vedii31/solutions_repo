{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection 1. Introduction Projectile motion is a classical problem in physics, demonstrating fundamental principles of kinematics and dynamics. The study of projectile motion has extensive applications in fields like engineering, sports, ballistics, aerospace, and video game physics . This report explores how the range of a projectile depends on its angle of projection. By analyzing these dependencies, we uncover important insights into real-world problems, from optimizing a soccer kick to launching spacecrafts. Key Questions Explored: How does the range of a projectile change with launch angle? What is the optimal launch angle for maximum range? How do environmental factors (air resistance, wind, gravity variations) impact projectile motion? 2. Theoretical Foundations 2.1 Governing Equations of Motion Projectile motion follows Newton\u2019s Laws , particularly the equations of motion under uniform acceleration. Given an initial velocity \\(v_0\\) and launch angle \\(\\theta\\) , we break the motion into: Horizontal Motion \\[ x = v_0 \\cos(\\theta) t \\] \\[ v_x = v_0 \\cos(\\theta) \\quad (\\text{constant}) \\] Vertical Motion \\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] \\[ v_y = v_0 \\sin(\\theta) - g t \\] where: - \\(g\\) is the acceleration due to gravity (9.81 m/s\u00b2 on Earth). 2.2 Time of Flight The projectile reaches the ground when \\(y = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] 2.3 Range Equation The horizontal distance (range) at landing is: \\[ R = v_0 \\cos(\\theta) t_f = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] From this equation, we note: Max range occurs at \\(\\theta = 45^\\circ\\) . Range is symmetric: \\(30^\\circ\\) and \\(60^\\circ\\) give the same range. 3. Advanced Theoretical Considerations 3.1 Finding the Maximum Range Taking the derivative of \\(R(\\theta)\\) and setting it to zero: \\[ \\frac{dR}{d\\theta} = \\frac{2 v_0^2 \\cos(2\\theta)}{g} = 0 \\] Solving for \\(\\theta\\) : \\[ 2\\theta = 90^\\circ \\Rightarrow \\theta = 45^\\circ \\] Thus, the maximum range is at \\(45^\\circ\\) . 3.2 Effect of Air Resistance With air resistance \\(F_d = \\frac{1}{2} C_d \\rho A v^2\\) , the equations become: \\[ m \\frac{dv_x}{dt} = -F_d \\cos(\\theta) \\] \\[ m \\frac{dv_y}{dt} = -mg - F_d \\sin(\\theta) \\] These equations require numerical methods for solutions. 4. Python Implementation 4.1 Range vs. Angle (Basic Model) import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, theta, g=9.81): return (v0**2 * np.sin(2 * np.radians(theta))) / g angles = np.linspace(0, 90, 100) v0_values = [10, 20, 30] plt.figure(figsize=(8,5)) for v0 in v0_values: ranges = [projectile_range(v0, theta) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.axvline(45, linestyle='--', color='black', label='Max at 45\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() from mpl_toolkits.mplot3d import Axes3D fig = plt.figure(figsize=(10, 6)) ax = fig.add_subplot(111, projection='3d') for theta in [30, 45, 60]: t = np.linspace(0, 2*v0*np.sin(np.radians(theta))/g, 100) x = v0 * np.cos(np.radians(theta)) * t y = v0 * np.sin(np.radians(theta)) * t - 0.5 * g * t**2 ax.plot(x, t, y, label=f'\u03b8 = {theta}\u00b0') ax.set_xlabel('Horizontal Distance') ax.set_ylabel('Time') ax.set_zlabel('Vertical Height') ax.legend() plt.show() def projectile_with_drag(v0, theta, g=9.81, Cd=0.47, rho=1.225, A=0.01, m=0.1, dt=0.01): vx = v0 * np.cos(np.radians(theta)) vy = v0 * np.sin(np.radians(theta)) x, y = 0, 0 positions = [] while y >= 0: v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / m ay = -g - (Fd * vy / m) vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt positions.append((x, y)) return np.array(positions) pos = projectile_with_drag(20, 45) plt.plot(pos[:, 0], pos[:, 1], label='With Air Resistance') plt.xlabel('Horizontal Distance') plt.ylabel('Vertical Height') plt.title('Projectile Motion with Air Resistance') plt.legend() plt.grid() plt.show() 5. Real-World Applications Sports: Optimizing soccer free kicks, basketball shots, and javelin throws. Engineering: Calculating projectile paths in ballistics and aerospace. Space Science: Determining launch angles for interplanetary missions. Video Games: Simulating realistic projectile motion in physics engines. 6. Conclusion & Future Work Projectile motion is fundamental in physics, but real-world factors like air resistance, wind, and non-uniform gravity make it complex. Future studies can use: Machine Learning for predictive modeling of projectile behavior. CFD Simulations to analyze drag forces in different environments. Monte Carlo Methods for uncertainty analysis in real-world applications. This study provides a detailed framework for analyzing projectile motion and lays the foundation for more advanced research in physics, engineering, and beyond.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Projectile motion is a classical problem in physics, demonstrating fundamental principles of kinematics and dynamics. The study of projectile motion has extensive applications in fields like engineering, sports, ballistics, aerospace, and video game physics . This report explores how the range of a projectile depends on its angle of projection. By analyzing these dependencies, we uncover important insights into real-world problems, from optimizing a soccer kick to launching spacecrafts.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-questions-explored","text":"How does the range of a projectile change with launch angle? What is the optimal launch angle for maximum range? How do environmental factors (air resistance, wind, gravity variations) impact projectile motion?","title":"Key Questions Explored:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-theoretical-foundations","text":"","title":"2. Theoretical Foundations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-governing-equations-of-motion","text":"Projectile motion follows Newton\u2019s Laws , particularly the equations of motion under uniform acceleration. Given an initial velocity \\(v_0\\) and launch angle \\(\\theta\\) , we break the motion into:","title":"2.1 Governing Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"\\[ x = v_0 \\cos(\\theta) t \\] \\[ v_x = v_0 \\cos(\\theta) \\quad (\\text{constant}) \\]","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"\\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] \\[ v_y = v_0 \\sin(\\theta) - g t \\] where: - \\(g\\) is the acceleration due to gravity (9.81 m/s\u00b2 on Earth). 2.2 Time of Flight The projectile reaches the ground when \\(y = 0\\) : \\[ t_f = \\frac{2 v_0 \\sin(\\theta)}{g} \\] 2.3 Range Equation The horizontal distance (range) at landing is: \\[ R = v_0 \\cos(\\theta) t_f = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] From this equation, we note: Max range occurs at \\(\\theta = 45^\\circ\\) . Range is symmetric: \\(30^\\circ\\) and \\(60^\\circ\\) give the same range.","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-advanced-theoretical-considerations","text":"","title":"3. Advanced Theoretical Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-finding-the-maximum-range","text":"Taking the derivative of \\(R(\\theta)\\) and setting it to zero: \\[ \\frac{dR}{d\\theta} = \\frac{2 v_0^2 \\cos(2\\theta)}{g} = 0 \\] Solving for \\(\\theta\\) : \\[ 2\\theta = 90^\\circ \\Rightarrow \\theta = 45^\\circ \\] Thus, the maximum range is at \\(45^\\circ\\) .","title":"3.1 Finding the Maximum Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-effect-of-air-resistance","text":"With air resistance \\(F_d = \\frac{1}{2} C_d \\rho A v^2\\) , the equations become: \\[ m \\frac{dv_x}{dt} = -F_d \\cos(\\theta) \\] \\[ m \\frac{dv_y}{dt} = -mg - F_d \\sin(\\theta) \\] These equations require numerical methods for solutions.","title":"3.2 Effect of Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-python-implementation","text":"","title":"4. Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#41-range-vs-angle-basic-model","text":"import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, theta, g=9.81): return (v0**2 * np.sin(2 * np.radians(theta))) / g angles = np.linspace(0, 90, 100) v0_values = [10, 20, 30] plt.figure(figsize=(8,5)) for v0 in v0_values: ranges = [projectile_range(v0, theta) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.axvline(45, linestyle='--', color='black', label='Max at 45\u00b0') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (meters)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() from mpl_toolkits.mplot3d import Axes3D fig = plt.figure(figsize=(10, 6)) ax = fig.add_subplot(111, projection='3d') for theta in [30, 45, 60]: t = np.linspace(0, 2*v0*np.sin(np.radians(theta))/g, 100) x = v0 * np.cos(np.radians(theta)) * t y = v0 * np.sin(np.radians(theta)) * t - 0.5 * g * t**2 ax.plot(x, t, y, label=f'\u03b8 = {theta}\u00b0') ax.set_xlabel('Horizontal Distance') ax.set_ylabel('Time') ax.set_zlabel('Vertical Height') ax.legend() plt.show() def projectile_with_drag(v0, theta, g=9.81, Cd=0.47, rho=1.225, A=0.01, m=0.1, dt=0.01): vx = v0 * np.cos(np.radians(theta)) vy = v0 * np.sin(np.radians(theta)) x, y = 0, 0 positions = [] while y >= 0: v = np.sqrt(vx**2 + vy**2) Fd = 0.5 * Cd * rho * A * v**2 ax = -Fd * vx / m ay = -g - (Fd * vy / m) vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt positions.append((x, y)) return np.array(positions) pos = projectile_with_drag(20, 45) plt.plot(pos[:, 0], pos[:, 1], label='With Air Resistance') plt.xlabel('Horizontal Distance') plt.ylabel('Vertical Height') plt.title('Projectile Motion with Air Resistance') plt.legend() plt.grid() plt.show()","title":"4.1 Range vs. Angle (Basic Model)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-real-world-applications","text":"","title":"5. Real-World Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#sports","text":"Optimizing soccer free kicks, basketball shots, and javelin throws.","title":"Sports:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#engineering","text":"Calculating projectile paths in ballistics and aerospace.","title":"Engineering:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#space-science","text":"Determining launch angles for interplanetary missions.","title":"Space Science:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#video-games","text":"Simulating realistic projectile motion in physics engines.","title":"Video Games:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-conclusion-future-work","text":"Projectile motion is fundamental in physics, but real-world factors like air resistance, wind, and non-uniform gravity make it complex. Future studies can use: Machine Learning for predictive modeling of projectile behavior. CFD Simulations to analyze drag forces in different environments. Monte Carlo Methods for uncertainty analysis in real-world applications. This study provides a detailed framework for analyzing projectile motion and lays the foundation for more advanced research in physics, engineering, and beyond.","title":"6. Conclusion &amp; Future Work"},{"location":"1%20Physics/1%20Mechanics/problemsecond/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Understanding the Physical System A pendulum is a fundamental mechanical system that exhibits a variety of motion types, including periodic, damped, and chaotic behaviors, depending on external influences. When damping (friction) and external periodic forcing are introduced, the motion becomes more complex and can exhibit chaotic behavior. The governing equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement (radians). - \\(b\\) is the damping coefficient, accounting for resistive forces. - \\(g\\) is the acceleration due to gravity. - \\(L\\) is the length of the pendulum. - \\(A \\cos(\\omega t)\\) represents the external periodic driving force with amplitude \\(A\\) and frequency \\(\\omega\\) . Key Concepts Simple Harmonic Motion : If \\(b = 0\\) and \\(A = 0\\) , the motion is simple harmonic for small angles. Damped Motion : If \\(b > 0\\) and \\(A = 0\\) , oscillations decay over time due to resistive forces. Forced Motion : If \\(A > 0\\) , an external force drives the pendulum, leading to resonance and chaotic behavior. 2. Transforming the Equation for Numerical Methods The equation above is a second-order differential equation , which must be rewritten as a system of first-order equations for numerical solving. Defining State Variables We introduce: - \\(\\theta_1 = \\theta\\) (position) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) (velocity) Rewriting the system: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b\\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\] This form allows us to apply numerical integration techniques like Runge-Kutta (RK45) . 3. Choosing a Numerical Solver We employ the Runge-Kutta (RK45) method , which is well-suited for solving nonlinear differential equations. This method is preferred because: It handles nonlinearity effectively. It dynamically adjusts step size for accuracy. It is frequently used for chaotic systems like the forced damped pendulum. 4. Setting Up Initial Conditions The initial state of the pendulum significantly affects its behavior. We define: \\[ \\theta(0) = \\theta_0, \\quad \\frac{d\\theta}{dt}(0) = \\omega_0 \\] For example: - Small initial displacement : \\(\\theta_0 = 0.1\\) rad. - Initially at rest : \\(\\omega_0 = 0\\) rad/s. 5. Running the Simulation To numerically integrate the system: 1. Define the time span for simulation (e.g., \\(t \\in [0, 50]\\) ). 2. Solve the equations using the RK45 method . 3. Store and analyze the results over time. Implementation in Python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Length of the pendulum (m) b = 0.2 # Damping coefficient omega = 2.0 # Driving frequency # Define the system of ODEs def forced_damped_pendulum(t, y, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t0, t_end = 0, 50 initial_conditions = [0.1, 0] # Small initial angle and zero initial velocity # Solve the system time_eval = np.linspace(t0, t_end, 2000) A = 1.2 # Set A for initial run sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A, omega), t_eval=time_eval, method='RK45') # Extract results theta = sol.y[0] omega_values = sol.y[1] time = sol.t # Time Series Plot plt.figure(figsize=(10, 5)) plt.plot(time, theta, label=r'$\\theta(t)$', color='b') plt.xlabel('Time (s)') plt.ylabel('Angular Position (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() # Phase Portrait plt.figure(figsize=(6, 6)) plt.plot(theta, omega_values, lw=0.8, color='r') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Phase Portrait') plt.grid() plt.show() # Poincar\u00e9 Section (Stroboscopic Map) omega_scalar = float(np.mean(omega_values)) if isinstance(omega_values, np.ndarray) else omega if omega_scalar != 0: poincare_times = np.arange(t0, t_end, 2 * np.pi / omega_scalar) else: poincare_times = np.linspace(t0, t_end, 50) # Fallback to evenly spaced points theta_poincare = np.interp(poincare_times, time, theta) omega_poincare = np.interp(poincare_times, time, omega_values) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=10, color='green') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show() # Bifurcation Diagram - Sweeping Driving Force Amplitude A_values = np.linspace(0, 2, 50) final_theta = [] for A_val in A_values: sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A_val, omega), t_eval=np.linspace(t_end-10, t_end, 500), method='RK45') final_theta.append(sol.y[0][-1]) plt.figure(figsize=(10, 6)) plt.scatter(A_values, final_theta, s=1, color='blue') plt.xlabel('Driving Force Amplitude (A)') plt.ylabel('Final Angular Position (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show() 6. Visualizing Results After solving for \\(\\theta(t)\\) , we analyze its behavior using different graphical representations: (a) Time Series Plot Shows how \\(\\theta(t)\\) evolves over time. Helps detect periodicity, resonance, or chaotic motion. (b) Phase Portrait Plots angular position ( \\(\\theta\\) ) vs. angular velocity ( \\(\\dot{\\theta}\\) ) . Closed loops indicate periodic motion, while scattered points suggest chaos. (c) Poincar\u00e9 Section Captures stroboscopic points sampled at regular intervals. Helps distinguish between regular and chaotic motion . (d) Bifurcation Diagram Varies the driving force amplitude (A) to observe transitions in motion. Reveals transitions from stability to chaos . 7. Analyzing the Behavior Different values of parameters lead to different types of motion: (a) Small Forcing and Weak Damping The pendulum exhibits simple periodic oscillations . The phase portrait shows smooth elliptical loops . (b) Resonance Condition When \\(\\omega\\) matches the natural frequency \\(\\omega_0 = \\sqrt{g/L}\\) , large oscillations occur. Energy accumulates over time, leading to strong oscillations. (c) Strong Damping Oscillations decay quickly, leading to overdamped motion . (d) Chaotic Motion For specific values of \\(A\\) and \\(\\omega\\) , the system exhibits sensitive dependence on initial conditions . Small changes in \\(\\theta_0\\) lead to divergent trajectories (butterfly effect). 8. Conclusion The forced damped pendulum is a rich nonlinear system that displays a variety of behaviors, from periodic to chaotic motion. Using numerical simulations , we can analyze its response to different parameters. Tools like Poincar\u00e9 sections and bifurcation diagrams help classify its dynamical regimes.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#1-understanding-the-physical-system","text":"A pendulum is a fundamental mechanical system that exhibits a variety of motion types, including periodic, damped, and chaotic behaviors, depending on external influences. When damping (friction) and external periodic forcing are introduced, the motion becomes more complex and can exhibit chaotic behavior. The governing equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement (radians). - \\(b\\) is the damping coefficient, accounting for resistive forces. - \\(g\\) is the acceleration due to gravity. - \\(L\\) is the length of the pendulum. - \\(A \\cos(\\omega t)\\) represents the external periodic driving force with amplitude \\(A\\) and frequency \\(\\omega\\) .","title":"1. Understanding the Physical System"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#key-concepts","text":"Simple Harmonic Motion : If \\(b = 0\\) and \\(A = 0\\) , the motion is simple harmonic for small angles. Damped Motion : If \\(b > 0\\) and \\(A = 0\\) , oscillations decay over time due to resistive forces. Forced Motion : If \\(A > 0\\) , an external force drives the pendulum, leading to resonance and chaotic behavior.","title":"Key Concepts"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#2-transforming-the-equation-for-numerical-methods","text":"The equation above is a second-order differential equation , which must be rewritten as a system of first-order equations for numerical solving.","title":"2. Transforming the Equation for Numerical Methods"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#defining-state-variables","text":"We introduce: - \\(\\theta_1 = \\theta\\) (position) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) (velocity) Rewriting the system: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b\\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\] This form allows us to apply numerical integration techniques like Runge-Kutta (RK45) .","title":"Defining State Variables"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#3-choosing-a-numerical-solver","text":"We employ the Runge-Kutta (RK45) method , which is well-suited for solving nonlinear differential equations. This method is preferred because: It handles nonlinearity effectively. It dynamically adjusts step size for accuracy. It is frequently used for chaotic systems like the forced damped pendulum.","title":"3. Choosing a Numerical Solver"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#4-setting-up-initial-conditions","text":"The initial state of the pendulum significantly affects its behavior. We define: \\[ \\theta(0) = \\theta_0, \\quad \\frac{d\\theta}{dt}(0) = \\omega_0 \\] For example: - Small initial displacement : \\(\\theta_0 = 0.1\\) rad. - Initially at rest : \\(\\omega_0 = 0\\) rad/s.","title":"4. Setting Up Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#5-running-the-simulation","text":"To numerically integrate the system: 1. Define the time span for simulation (e.g., \\(t \\in [0, 50]\\) ). 2. Solve the equations using the RK45 method . 3. Store and analyze the results over time.","title":"5. Running the Simulation"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#implementation-in-python","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Length of the pendulum (m) b = 0.2 # Damping coefficient omega = 2.0 # Driving frequency # Define the system of ODEs def forced_damped_pendulum(t, y, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t0, t_end = 0, 50 initial_conditions = [0.1, 0] # Small initial angle and zero initial velocity # Solve the system time_eval = np.linspace(t0, t_end, 2000) A = 1.2 # Set A for initial run sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A, omega), t_eval=time_eval, method='RK45') # Extract results theta = sol.y[0] omega_values = sol.y[1] time = sol.t # Time Series Plot plt.figure(figsize=(10, 5)) plt.plot(time, theta, label=r'$\\theta(t)$', color='b') plt.xlabel('Time (s)') plt.ylabel('Angular Position (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() # Phase Portrait plt.figure(figsize=(6, 6)) plt.plot(theta, omega_values, lw=0.8, color='r') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Phase Portrait') plt.grid() plt.show() # Poincar\u00e9 Section (Stroboscopic Map) omega_scalar = float(np.mean(omega_values)) if isinstance(omega_values, np.ndarray) else omega if omega_scalar != 0: poincare_times = np.arange(t0, t_end, 2 * np.pi / omega_scalar) else: poincare_times = np.linspace(t0, t_end, 50) # Fallback to evenly spaced points theta_poincare = np.interp(poincare_times, time, theta) omega_poincare = np.interp(poincare_times, time, omega_values) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=10, color='green') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show() # Bifurcation Diagram - Sweeping Driving Force Amplitude A_values = np.linspace(0, 2, 50) final_theta = [] for A_val in A_values: sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A_val, omega), t_eval=np.linspace(t_end-10, t_end, 500), method='RK45') final_theta.append(sol.y[0][-1]) plt.figure(figsize=(10, 6)) plt.scatter(A_values, final_theta, s=1, color='blue') plt.xlabel('Driving Force Amplitude (A)') plt.ylabel('Final Angular Position (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show()","title":"Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#6-visualizing-results","text":"After solving for \\(\\theta(t)\\) , we analyze its behavior using different graphical representations:","title":"6. Visualizing Results"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#a-time-series-plot","text":"Shows how \\(\\theta(t)\\) evolves over time. Helps detect periodicity, resonance, or chaotic motion.","title":"(a) Time Series Plot"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#b-phase-portrait","text":"Plots angular position ( \\(\\theta\\) ) vs. angular velocity ( \\(\\dot{\\theta}\\) ) . Closed loops indicate periodic motion, while scattered points suggest chaos.","title":"(b) Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#c-poincare-section","text":"Captures stroboscopic points sampled at regular intervals. Helps distinguish between regular and chaotic motion .","title":"(c) Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#d-bifurcation-diagram","text":"Varies the driving force amplitude (A) to observe transitions in motion. Reveals transitions from stability to chaos .","title":"(d) Bifurcation Diagram"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#7-analyzing-the-behavior","text":"Different values of parameters lead to different types of motion:","title":"7. Analyzing the Behavior"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#a-small-forcing-and-weak-damping","text":"The pendulum exhibits simple periodic oscillations . The phase portrait shows smooth elliptical loops .","title":"(a) Small Forcing and Weak Damping"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#b-resonance-condition","text":"When \\(\\omega\\) matches the natural frequency \\(\\omega_0 = \\sqrt{g/L}\\) , large oscillations occur. Energy accumulates over time, leading to strong oscillations.","title":"(b) Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#c-strong-damping","text":"Oscillations decay quickly, leading to overdamped motion .","title":"(c) Strong Damping"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#d-chaotic-motion","text":"For specific values of \\(A\\) and \\(\\omega\\) , the system exhibits sensitive dependence on initial conditions . Small changes in \\(\\theta_0\\) lead to divergent trajectories (butterfly effect).","title":"(d) Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/problemsecond/#8-conclusion","text":"The forced damped pendulum is a rich nonlinear system that displays a variety of behaviors, from periodic to chaotic motion. Using numerical simulations , we can analyze its response to different parameters. Tools like Poincar\u00e9 sections and bifurcation diagrams help classify its dynamical regimes.","title":"8. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}